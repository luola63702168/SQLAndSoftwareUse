数据库表结构设计：参考三范式并考虑扩展问题、查询快慢问题进行数据库的设计。

	- 三范式：https://www.zhihu.com/question/24696366
		1、拆的不能再拆了
		2、所有字段都依赖于主键，且避免大量的冗余字段
		3、非主键外的所有字段必须互不依赖

	- 索引（二叉树结构）
		- 总是要根据某个字段来进行查询，那么就要为该字段建立索引（索引可以参考在公司里找人的时候有无前台的概念，避免你一个一个去问：你是不是那谁谁谁?）
			- 唯一约束也是唯一约束。比如：主键、外键
			- 既然存在联合主键，那么就会有联合索引
				- 联合索引遵循最左原则，所以 user,city,name三个字段建立联合索引，能利用的只有三种情况：user,city,name、  user,city、   user。
		- 双刃剑：提升查询速度，但是会降低增删改，因为每进行一次增删改的时候都要进行重新建立索引。
		- 最左原则，sql语句在查询的时候，也就是where跟的条件，要把有索引的条件放在最左边。

	- 在程序中查询时尽量不要 select *
		- 这是因为网络连接的原因，数据多，传输耗时。

	- 能使用联合(连接)查询，不要使用子查询。

	- 能不使用联合查询，就不要使用联合查询。

	- 外键（数据量大的时候，删除外键，通过程序来维护它，因为维护外键是有额外的开销的，这是影响性能的）
		外键的作用：保证数据的完整性（有时候删除表信息的时候，是删不掉的->当然是可以指定级联cascade的，这样删除一条信息，所有有关联的信息同时删除）

	- 慢查询工具，定位效率低的sql语句（mysql_slow）。


	- 冗余字段，以空间换时间

	- 引入缓存

	- 主从同步实现读写分离（也叫主从热备份）

	- 分库分表
		- 垂直分表：将一个表的多个字段分开，每张表管理不同的字段，并通过相同的id进行关联。
		- 垂直分库：一个数据库中包含多个逻辑（用户、订单、商品、），这时候按逻辑分库即可（但是需要保证的是，这三个逻辑最好没有表关系）。

		- 水平分表： 表数据太多了，将记录分表存（主键不能是自增形，保证主键不能重复）。
		- 水平分库： 把每张表存入独立的数据库中，即可。

		- 查询的时候判断存在哪个数据库中即可。比如定义每个数据库中存3000w条数据，这样根据主键id与之对比，即可知道。








